<?php

/**
* Model stub class generated by the Wave\DB ORM.
* Changes made to this file WILL NOT BE OVERWRITTEN when database is next generated.
*
* @package:   Models\Models\Auth
* @generated: 2015-09-29 09:53:08
*
* @schema:    service-auth
* @table:     auth_email
* @engine:    InnoDB
* @collation: utf8_general_ci
*
*/

namespace Models\Platform;

use    DateTime,
    Wave,
    Wave\DB,
    Wave\Config,
    Wave\Log;

class AuthEmail extends Base\AuthEmail {

    const AUTH_TYPE = 'email';

    /**
     * @param $provided_password
     * @return bool
     *
     * Returns true on successful verification, otherwise false
     */
    public function verifyPassword($provided_password){
        return password_verify($provided_password, $this->password);
    }

    /**
     * @param $email_address
     * @param $password
     * @return bool
     *
     * Attempt to authenticate a user based on a email address and password.
     * Returns a bool based on auth success or failure.
     */
    public static function authenticate($email_address, $password, $source_ip){

        $log_context = ['email_address' => $email_address];

        /** @var AuthEmail $auth */
        $auth = AuthEmail::load_by_email_address($email_address);

        if($auth instanceof AuthEmail){

            $match = $auth->verifyPassword($password);

            AuthAttempt::record($auth->user_id, $source_ip, $match);

            if($match === true) {
                return $auth->User;
            }

            Log::write('application', 'Authentication attempt failed, incorrect password', Log::NOTICE, $log_context);
        }

        Log::write('application', sprintf('Authentication attempt failed, no such email address [%s]', $email_address), Log::INFO, $log_context);

        return false;

    }

    public static function load_by_email_address($email_address){

        return DB::get()->from('AuthEmail')
                        ->innerJoin('User', $u_alias)
                            ->using('user_id')
                        ->where("$u_alias.email = ?", $email_address)
                        ->fetchRow();

    }

    public static function load_by_user(User $user){

        return DB::get()->from('AuthEmail')
                        ->where('user_id = ?', $user->user_id)
                        ->fetchRow();

    }

    /**
     * @param User $user
     * @param $data
     * @return bool|AuthEmail
     *
     * Create an AuthEmail for a user. There can only be one password per account.
     */
    public static function create(User $user, $data) {

        $auth = self::load_by_user($user);
        if(!$auth instanceof AuthEmail){
            $auth = new AuthEmail();
            $auth->created = new DateTime();
            $auth->user_id = $user->user_id;
        }

        $auth->password = self::hash_password($user->user_id, $data['password']);
        $auth->updated = new DateTime();
        if($auth->save())
            return true;

        return false;

    }

    /**
     * @param $user_id
     * @param $password
     * @return bool|string
     *
     * Return the hash of a password string using the BCRYPT algorigthm
     */
    private static function hash_password($user_id, $password){

        $config = Config::get('app')->auth;

        $cost = (isset($config['password_hash_cost']) ? $config['password_hash_cost'] : 10);

        if(strlen($password) > 72)
            Log::write('application', 'Provided password exceeds maximum length of 72 characters, truncating', LOG::WARNING, ['user_id' => $user_id]);

        return password_hash($password, PASSWORD_BCRYPT, ['cost' => $cost]);

    }

}