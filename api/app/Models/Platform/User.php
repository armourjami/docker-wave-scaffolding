<?php

/**
* Model stub class generated by the Wave\DB ORM.
* Changes made to this file WILL NOT BE OVERWRITTEN when database is next generated.
*
* @package:   Models\Models\Auth
* @generated: 2015-09-28 08:02:32
*
* @schema:    service-auth
* @table:     User
* @engine:    InnoDB
* @collation: utf8_general_ci
*
*/

namespace Models\Platform;

use Wave;
use Wave\DB;

/**
 * Class User
 * @package Models\Platform
 *
 * The concatenated first & last names
 * @property string $full_name
 *
 */
class User extends Base\User {

    const STATUS_ACTIVE = 'active';
    const STATUS_DISABLED = 'disabled';


    /**
     * @param $type
     * @param $data
     * @return bool
     *
     * Add credentials for a user. Will return false if the user already has
     * a password or if the store ID / pin combination is in use.
     *
     */
    public function addCredentials($type, $data){
        if($type == AuthEmail::AUTH_TYPE)
            return AuthEmail::create($this, $data);

        return false;

    }

    public function getCompiledUser(){

        $user = array_merge($this->_toArray(), [
            'full_name' => $this->getfull_name()
        ]);

        // Don't return legacy auth information
        unset($user['auth_key']);
        unset($user['password']);

        return $user;
    }

    public function getfull_name(){
        if(!isset($this->_data['full_name'])){
            $this->_data['full_name'] = $this->first_name . ' ' . $this->last_name;
        }
        return $this->_data['full_name'];
    }

    public static function loadByEmail($email_address){
        return DB::get()->from('User')->where("email = ?", $email_address)->fetchRow();
    }

    /**
     * @param $data
     * @return array|bool|User
     *
     * Create an User (or if one already exists, return that instead).
     * Credential identifier (e.g. email address, fb id, store code) is used to
     * determine uniqueness.
     */
    public static function create($data) {

        $existing = self::loadByEmail($data['email']);
        if($existing instanceof User)
            return $existing;

        $user = new User($data);
        $user->status = self::STATUS_ACTIVE;

        if(!$user->save())
            return false;

        if(isset($data['password']))
            $user->addCredentials(AuthEmail::AUTH_TYPE, $data);

        return $user;

    }

    public function update($data = null) {
        parent::updateFromArray($data);
        $this->save();

        return $this;
    }

    public function disable(){
        $this->status = self::STATUS_DISABLED;
        $this->save();

        return $this;
    }

    public function changePassword($new_password) {
        AuthEmail::create($this, ['password' => $new_password]);
    }

    public function validatePassword($password){
        /** @var AuthEmail $auth */
        $auth = AuthEmail::load_by_user($this);
        if($auth instanceof AuthEmail)
            return $auth->verifyPassword($password);

        return false;
    }


}